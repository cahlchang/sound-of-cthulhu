name: Electron CD

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
#        os: [macOS-10.15, windows-2016, ubuntu-18.04]
        os: [macOS-10.15, windows-2016]
 
    steps:
      - name: Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
          
      - uses: actions/checkout@v2
            
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
              ${{ runner.os }}-build-${{ env.cache-name }}-
              ${{ runner.os }}-build-
              ${{ runner.os }}-

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: v13.7.0
      - name: yarn install
        run: |
          yarn install
          yarn postinstall
      - name: make token files
        run: |
          echo ${{ secrets.DISCORD_TOKEN }} > src/discord_token.js
            
      - name: Build for linux
        if: matrix.os == 'ubuntu-18.04'
        run: yarn electron:build --linux
        env:
          USE_HARD_LINKS: false

      - name: Build for macOS
        if: matrix.os == 'macOS-10.15'
        run: yarn electron:build --mac
        env:
          USE_HARD_LINKS: false

      - name: Build for Windows
        if: matrix.os == 'windows-2016'
        run: yarn electron:build --win
        env:
          USE_HARD_LINKS: false

      - name: Cleanup artifacts
        run: |
          npx rimraf "dist_electron/!(sound-of-cthulhu*.exe|sound-of-cthulhu-1.0.0-mac|*.AppImage|*.dmg)"

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
